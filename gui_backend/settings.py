"""
Django settings for gui_backend project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from pathlib import Path

# import logfire

# logfire.configure()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-03=_xovz8!7iye4cm-_l5)qqg(h-647!+--#3y1eub8w=1n8-i'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# ALLOWED_HOSTS = [
#     "localhost",
#     "127.0.0.1",
#     "10.136.110.179"
# ]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    "ninja",
    "ninja_crud",
    "ninja_extra",

    # [django-allauth]: 记得执行 python manage.py makemigrations 和 python manage.py migrate，pip 的 app 有数据库配置
    'django.contrib.sites',  # 添加站点框架
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    # 添加你希望支持的社交认证提供者，例如：
    'allauth.socialaccount.providers.facebook',  # Facebook
    'allauth.socialaccount.providers.google',  # Google

    # FIXME: django-cors-headers
    "corsheaders",

    "apps.index",
    "apps.api",
]

MIDDLEWARE = [
    # FIXME: django-cors-headers
    "corsheaders.middleware.CorsMiddleware",  # 放在其他中间件之前，尤其是在 CommonMiddleware 之前

    # [django-allauth]
    "allauth.account.middleware.AccountMiddleware",

    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 设置国际化：他这个是如何翻译的？加上这个以后，django-allauth 居然也帮我翻译了。
    "django.middleware.locale.LocaleMiddleware",

    "apps.api.middleware.RequestCountMiddleware",
]

# -------------------------------------------------------------------------------------------------------------------- #
# [django-allauth]
# (N)!: 这个 app 的登录页面虽然简陋，但是似乎功能挺全面？

SITE_ID = 1  # 你需要为站点框架配置 SITE_ID

ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'  # 进行邮件验证
ACCOUNT_AUTHENTICATED_LOGIN_REDIRECTS = True  # 登录后重定向
LOGIN_REDIRECT_URL = '/'  # 登录后重定向到主页
ACCOUNT_LOGOUT_ON_GET = True  # 使用 GET 请求来登出

AUTHENTICATION_BACKENDS = (
    "django.contrib.auth.backends.ModelBackend",  # 默认的后端
    "allauth.account.auth_backends.AuthenticationBackend",  # 添加 allauth 后端
)
# -------------------------------------------------------------------------------------------------------------------- #
# FIXME: 2024-12-15：前后端分离跨域问题的解决办法（gpt 生成，原理我不知道）

# 允许所有来源
CORS_ALLOW_ALL_ORIGINS = True  # or use CORS_ALLOWED_ORIGINS

# 只允许特定来源
# CORS_ALLOWED_ORIGINS = [
#     "http://localhost:3000", # 开发环境
#     "https://yourfrontend.com", # 生产环境
# ]

# 允许特定 HTTP 方法
CORS_ALLOW_METHODS = [
    "GET",
    "POST",
    "PUT",
    "DELETE",
    "OPTIONS"
]

# 允许携带认证信息（如 Cookie）
CORS_ALLOW_CREDENTIALS = True
# -------------------------------------------------------------------------------------------------------------------- #


ROOT_URLCONF = 'gui_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'gui_backend.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# 日志配置
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,  # 不禁用现有的日志器
    'formatters': {
        'verbose': {
            'format': '{asctime} - {levelname} - {message}',  # {name}
            'style': '{',
            'datefmt': '%Y-%m-%d %H:%M:%S'
        },
        'simple': {
            'format': '{levelname} - {message}',
            'style': '{',
            'datefmt': '%Y-%m-%d %H:%M:%S'
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'django_file': {
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/django.log'),  # 日志文件路径
            'formatter': 'verbose',
            'encoding': 'utf-8',  # 2024-12-11：怎么还要设置这个，不设置会乱码...
            'level': 'DEBUG',  # 记录 DEBUG 及以上级别的日志
        },
        'print_file': {
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/service.log'),  # 日志文件路径
            'formatter': 'verbose',
            'encoding': 'utf-8',
            'level': 'DEBUG',  # 记录 DEBUG 及以上级别的日志
        },
    },
    'loggers': {
        'django': {
            'handlers': ['django_file'],  # 使用 console 和 file 处理器
            'level': 'DEBUG',  # 记录 DEBUG 及以上级别的日志
            'propagate': True,  # 日志传播
        },
        'print': {  # 这里替换为您的 Django 应用名称
            'handlers': ['print_file'],
            'level': 'DEBUG',
            'propagate': False,  # 如果不想传递给父日志
        },
    },
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
